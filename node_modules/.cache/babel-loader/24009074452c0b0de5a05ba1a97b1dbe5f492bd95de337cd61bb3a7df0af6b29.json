{"ast":null,"code":"var _jsxFileName = \"/Applications/APIwizULdeveloperassignment/text-analyzer/src/index.js\";\nimport './App.css';\nimport WordDetails from './worddetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App(root) {\n  return /*#__PURE__*/_jsxDEV(WordDetails, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n/*import { compose } from 'ramda';\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport 'whatwg-fetch';\nimport './style.css';\nimport WordDetails from './worddetails';\n\nclass App extends Component{\n  state = {\n    text: '',\n    charCount: 0,\n    wordCount: 0,\n    sentenceCount: 0,\n    paragraphCount: 0,\n    spaceCount: 0,\n    punctuationCount: 0\n  }\n  componentDidMount(){\n    this.getBacon()\n    .then(bacon => {this.setState({text: bacon.join('\\n\\n')}, () => this.setCounts(this.state.text));\n  }).catch(err => this.setState({text : `Error: ${err.message}`}));\n  }\n  getBacon = async () => {\n    const response = await fetch('https://baconipsum.com/api/?type=all-meat&paras=3');\n    const body = await response.json();\n    if(response.status !== 200) throw Error(body.message);\n    return body;\n  }\n  removeBreaks = arr => {\n    const index = arr.findIndex(el => el.match(/\\r?\\n|\\r/g));\n\n    if(index === -1) return arr;\n\n    const newArr = [...arr.slice(0, index), ...arr[index].split(/\\r?\\n|\\r/g), ...arr.slice(index + 1, arr.length)];\n\n    return this.removeBreaks(newArr);\n  }\n\n  removeEmotyElements = arr => {\n    const index = arr.findIndex(el => el.trim() === '');\n\n    if(index === -1)\n      return arr;\n    arr.splice(index, 1);\n\n    return this.removeEmotyElements(arr);\n  };\n  setCounts = value =>{\n    const trimmedValue = value.trim();\n    const words = compose(this.removeEmotyElements, this.removeBreaks)(trimmedValue.split(' '));\n    const sentences = compose(this.removeEmotyElements, this.removeBreaks)(trimmedValue.split('.'));\n    const paragraphs = this.removeEmotyElements(trimmedValue.split(/\\r?\\n|\\r/g));\n    const punctuation = trimmedValue.replace(/[^\\W\\s]/g, '');\n    const spaces = trimmedValue.split(' ').length - 1;\n\n    this.setState({\n      text: value,\n      charCount: trimmedValue.length,\n      wordCount: value === '' ? 0 : words.length,\n      sentenceCount: value === '' ? 0 : sentences.length,\n      paragraphCount: value === '' ? 0 : paragraphs.length,\n      punctuationCount: value === '' ? 0 : punctuation.length,\n      spaceCount: value === '' ? 0 : spaces\n    });\n  }\n  handleChange = e => this.setCounts(e.target.value);\n\n  render(){\n    return(\n      \n      <div>\n        <nav class='nav'> \n      <h1 className='heading'><a href='#'>Text Analyzer</a></h1>\n      <ul>\n        <li><a href='#'>Home</a></li>\n        <li><a href='https://github.com/mahak-dev' target='_blank'>About</a></li>\n        <li><a href='#'>Contact</a></li>\n      </ul>\n    </nav>\n    <div className='body-data'>\n      <h1>Enter Your Text and Get the Results Dynamically...</h1>\n      <textarea rows = '15' onChange = {this.handleChange} value = {this.state.text}/>\n        <h1 className='heading'>Text Report</h1>\n        <p className='heading-results'><strong>Character Count:</strong>{this.state.charCount}<br/>\n        <strong>Word Count:</strong>{this.state.wordCount}<br/>\n        <strong>Sentence Count:</strong>{this.state.sentenceCount}<br/>\n        <strong>Paragraph Count:</strong>{this.state.paragraphCount}<br/>\n        <strong>Space Count:</strong>{this.state.spaceCount}<br/>\n        <strong>Punctuation Count:</strong>{this.state.punctuationCount}<br/>\n        </p>\n        <WordDetails word={this.state.text} />\n    </div>\n    <footer>\n      <div className='container'>\n      <p>Created by <a href='https://github.com/mahak-dev' target='_blank'>Mahak Gupta</a></p></div>\n    </footer>\n      </div>\n    );\n  }\n}\nrender(<App />, document.getElementById('root'));*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["WordDetails","jsxDEV","_jsxDEV","App","root","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/APIwizULdeveloperassignment/text-analyzer/src/index.js"],"sourcesContent":["\nimport './App.css';\nimport WordDetails from './worddetails';\n\n\nfunction App(root) {\n  return (\n    <WordDetails />\n    \n  );\n}\nexport default App;\n\n\n\n\n\n/*import { compose } from 'ramda';\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport 'whatwg-fetch';\nimport './style.css';\nimport WordDetails from './worddetails';\n\nclass App extends Component{\n  state = {\n    text: '',\n    charCount: 0,\n    wordCount: 0,\n    sentenceCount: 0,\n    paragraphCount: 0,\n    spaceCount: 0,\n    punctuationCount: 0\n  }\n  componentDidMount(){\n    this.getBacon()\n    .then(bacon => {this.setState({text: bacon.join('\\n\\n')}, () => this.setCounts(this.state.text));\n  }).catch(err => this.setState({text : `Error: ${err.message}`}));\n  }\n  getBacon = async () => {\n    const response = await fetch('https://baconipsum.com/api/?type=all-meat&paras=3');\n    const body = await response.json();\n    if(response.status !== 200) throw Error(body.message);\n    return body;\n  }\n  removeBreaks = arr => {\n    const index = arr.findIndex(el => el.match(/\\r?\\n|\\r/g));\n\n    if(index === -1) return arr;\n\n    const newArr = [...arr.slice(0, index), ...arr[index].split(/\\r?\\n|\\r/g), ...arr.slice(index + 1, arr.length)];\n\n    return this.removeBreaks(newArr);\n  }\n\n  removeEmotyElements = arr => {\n    const index = arr.findIndex(el => el.trim() === '');\n\n    if(index === -1)\n      return arr;\n    arr.splice(index, 1);\n\n    return this.removeEmotyElements(arr);\n  };\n  setCounts = value =>{\n    const trimmedValue = value.trim();\n    const words = compose(this.removeEmotyElements, this.removeBreaks)(trimmedValue.split(' '));\n    const sentences = compose(this.removeEmotyElements, this.removeBreaks)(trimmedValue.split('.'));\n    const paragraphs = this.removeEmotyElements(trimmedValue.split(/\\r?\\n|\\r/g));\n    const punctuation = trimmedValue.replace(/[^\\W\\s]/g, '');\n    const spaces = trimmedValue.split(' ').length - 1;\n\n    this.setState({\n      text: value,\n      charCount: trimmedValue.length,\n      wordCount: value === '' ? 0 : words.length,\n      sentenceCount: value === '' ? 0 : sentences.length,\n      paragraphCount: value === '' ? 0 : paragraphs.length,\n      punctuationCount: value === '' ? 0 : punctuation.length,\n      spaceCount: value === '' ? 0 : spaces\n    });\n  }\n  handleChange = e => this.setCounts(e.target.value);\n\n  render(){\n    return(\n      \n      <div>\n        <nav class='nav'> \n      <h1 className='heading'><a href='#'>Text Analyzer</a></h1>\n      <ul>\n        <li><a href='#'>Home</a></li>\n        <li><a href='https://github.com/mahak-dev' target='_blank'>About</a></li>\n        <li><a href='#'>Contact</a></li>\n      </ul>\n    </nav>\n    <div className='body-data'>\n      <h1>Enter Your Text and Get the Results Dynamically...</h1>\n      <textarea rows = '15' onChange = {this.handleChange} value = {this.state.text}/>\n        <h1 className='heading'>Text Report</h1>\n        <p className='heading-results'><strong>Character Count:</strong>{this.state.charCount}<br/>\n        <strong>Word Count:</strong>{this.state.wordCount}<br/>\n        <strong>Sentence Count:</strong>{this.state.sentenceCount}<br/>\n        <strong>Paragraph Count:</strong>{this.state.paragraphCount}<br/>\n        <strong>Space Count:</strong>{this.state.spaceCount}<br/>\n        <strong>Punctuation Count:</strong>{this.state.punctuationCount}<br/>\n        </p>\n        <WordDetails word={this.state.text} />\n    </div>\n    <footer>\n      <div className='container'>\n      <p>Created by <a href='https://github.com/mahak-dev' target='_blank'>Mahak Gupta</a></p></div>\n    </footer>\n      </div>\n    );\n  }\n}\nrender(<App />, document.getElementById('root'));*/"],"mappings":";AACA,OAAO,WAAW;AAClB,OAAOA,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,SAASC,GAAGA,CAACC,IAAI,EAAE;EACjB,oBACEF,OAAA,CAACF,WAAW;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAGnB;AAACC,EAAA,GALQN,GAAG;AAMZ,eAAeA,GAAG;;AAMlpGA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}